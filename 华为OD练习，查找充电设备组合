一、题目描述
某个充电站，可提供n个充电设备，每个充电设备均有对应的输出功率。任意个充电设备组合的输出功率总和，均构成功率集合P的1个元素。功率集合P的最优元素，表示最接近充电站最大输出功率p_max的元素。

二、输入描述
输入3行：

第1行为充电设备个数n；
第2行为每个充电设备的输出功率；
第3行为充电站最大输出功率p_max；
三、输出描述
功率集合P的最优元素。

四、补充说明
充电设备个数n>04；
最优元素必须小于或等于充电站最大输出功率p_max；
五、Java算法源码
public static void main(String[] args) {Scanner sc = new Scanner(System.in);int n = sc.nextInt();List<Integer> numbers = new ArrayList<>();for (int i = 0; i < n; i++) {numbers.add(sc.nextInt());}int p_max = sc.nextInt();int max = 0;Set<Integer> objects = new HashSet<>();objects.add(0);for (Integer number : numbers) {Set<Integer> objects1 = new HashSet<>();for (Integer object : objects) {int newobj = object + number;if (newobj <= p_max) {objects1.add(newobj);max = Math.max(max, newobj);}}objects.addAll(objects1);}System.out.println(max);
}
六、效果展示
1、输入
5
20 30 40 50 60
90

2、输出
90

3、说明
当充电设备输出20、30、40时，其输出功率总和为90，最接近充电站最大充电输出功率，因此最优元素为90。

public class Main {
    public static void main(String[] args) {
        System.out.println("请输入充电个数：");
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt(); // 输入设备个数

        int[] powers = new int[n];// 存储每个设备的输出功率

        System.out.println("请输入每个设备的输出功率：");
        for (int i = 0; i < n; i++) {
            powers[i] = scanner.nextInt(); // 输入每个设备的输出功率
        }

        System.out.println("请输入充电站的最大输出功率：");
        int Max = scanner.nextInt(); // 输入最大输出功率

        int[][] dp = new int[powers.length + 1][Max + 1]; // 计算前 i 个设备，功率不超过 j 的最大值
        int i, j;
        for (i = 1; i <= powers.length; i++) {
            for (j = 1; j <= Max; j++) {
                if (powers[i - 1] > j) {
                    // 如果第 i 个设备的输出功率大于 j，则放弃选择第 i 个设备
                    dp[i][j] = dp[i - 1][j];
                }
                else { // 如果第 i 个设备的输出功率小于等于 j，则第 i 个设备可以选或不选
                    dp[i][j] = Math.max(dp[i - 1][j], powers[i - 1] + dp[i - 1][j - powers[i - 1]]);
                }
            }
        }
        System.out.println("最优元素为：" + dp[n][Max]); // 返回最大值
    }
}

