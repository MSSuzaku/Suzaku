实验目的：
1.了解图形用户界面基本组件窗口、按钮、文本框、选择框、滚动条等的使用方法，
2.了解如何使用布局管理器对组件进行管理，以及如何使用Java 的事件处理机制。
实验环境：
（1）开发工具及介绍
IntelliJ IDEA是一款专业的JAVA IDE编程工具，最新版本支持git、svn、github等版本控制工具，并整合了智能代码助手、代码自动提示等功能，软件的强大的静态代码分析和人体工程学设计，能够让用户的开发设计变得简单轻松。
同时，它也被认为是当前Java开发效率最快的IDE工具。 
（2）开发环境：window10系统、IntelliJ IDEA、JDK17。
（一）步骤
程序框架：是利用IDEA的插件“JFormDesigner”来绘制的，里面的棋盘是一个JPanel。
蛇的功能是由链表实现的，写的Snake类继承JLabel，Snake有个next的成员变量，表示蛇的某一块连接到的下一块。每次移动，就会从蛇尾开始逐一遍历一直到蛇的头部，将蛇的每一块都移动到下一块的位置上。
蛇头的移动方向：Snake类里有一个direction静态成员变量，取值分别为EAST、WEST、NORTH、SOUTH，如果值为EAST，那么在每次移动，蛇头都会向右移动，其他同理。
棋盘（JPanel）里添加了一个键盘监听事件，当键盘按下W或者↑，且当前的direction不为SOUTH时，就将direction的值改成NORTH。（这里的EAST、WEST、NORTH、SOUTH也不是什么枚举类型，只是一个int类型的值，是Snake里定义的常量）
速度控制：使用Timer（定时调度）
是否撞墙：直接判断蛇头的坐标有没有小于0或者大于棋盘的高度、宽度
是否吃到食物：需要分情况讨论，如果蛇头坐标是(a,b)，食物坐标是(x,y)，每个格子的边长是size，如果当前direction为NORTH，当且仅当a == x && y == b + size时，成功吃到食物，其他同理。
每次吃到食物，都会将这个食物作为这条蛇的头部，将原来的头部标识成蛇身，并重新随机生成一个食物（使用Random类随机生成一个坐标）
是否自己撞自己：和是否吃到食物的判断方法一样。

package SnakeGame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class SnakeGame extends JFrame implements KeyListener {
    private static final int WIDTH = 500; // 棋盘宽度
    private static final int HEIGHT = 500; // 棋盘高度
    private static final int SIZE = 20; // 每个格子的大小

    private JPanel board; // 棋盘面板
    private List<Snake> snake; // 蛇
    private Point food; // 食物
    private int direction; // 蛇头移动方向

    public SnakeGame() {
        setTitle("贪吃蛇游戏");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(WIDTH, HEIGHT);

        board = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                // 绘制食物
                g.setColor(Color.RED);
                g.fillRect(food.x, food.y, SIZE, SIZE);

                // 绘制蛇
                g.setColor(Color.GREEN);
                for (Snake s : snake) {
                    g.fillRect(s.getX(), s.getY(), SIZE, SIZE);
                }
            }
        };
        board.setBackground(Color.BLACK);
        board.setLayout(null);

        snake = new ArrayList<>();
        snake.add(new Snake(5 * SIZE, 5 * SIZE)); // 初始化蛇，起始坐标为(5, 5)
        direction = KeyEvent.VK_RIGHT; // 起始方向向右

        generateFood(); // 生成食物

        add(board);
        addKeyListener(this);
        setVisible(true);

        startGame(); // 开始游戏
    }

    private void startGame() {
        Timer timer = new Timer(200, e -> {
            move(); // 移动蛇
            checkCollision(); // 检查碰撞
            board.repaint(); // 重新绘制界面
        });
        timer.start();
    }

    private void move() {
        int x = snake.get(0).getX();
        int y = snake.get(0).getY();

        switch (direction) { // 根据方向移动蛇头
            case KeyEvent.VK_LEFT:
                x -= SIZE;
                break;
            case KeyEvent.VK_RIGHT:
                x += SIZE;
                break;
            case KeyEvent.VK_UP:
                y -= SIZE;
                break;
            case KeyEvent.VK_DOWN:
                y += SIZE;
                break;
        }

        // 创建新的蛇头，并将其添加到蛇列表的第一个位置
        Snake newHead = new Snake(x, y);
        snake.add(0, newHead);

        // 如果蛇没有吃到食物，移除蛇尾
        if (!isFoodEaten()) {
            snake.remove(snake.size() - 1);
        } else { // 如果蛇吃到食物，生成新的食物
            generateFood();
        }
    }

    private boolean isFoodEaten() {
        return snake.get(0).getX() == food.x && snake.get(0).getY() == food.y;
    }

    private void generateFood() {
        Random random = new Random();
        int x = random.nextInt(WIDTH / SIZE) * SIZE;
        int y = random.nextInt(HEIGHT / SIZE) * SIZE;
        food = new Point(x, y);
    }

    private void checkCollision() {
        // 检查蛇头是否撞墙
        if (snake.get(0).getX() < 0 || snake.get(0).getX() >= WIDTH
                || snake.get(0).getY() < 0 || snake.get(0).getY() >= HEIGHT) {
            gameOver();
        }

        // 检查蛇头是否撞到身体
        for (int i = 1; i < snake.size(); i++) {
            if (snake.get(0).getX() == snake.get(i).getX()
                    && snake.get(0).getY() == snake.get(i).getY()) {
                gameOver();
            }
        }
    }

    private void gameOver() {
        JOptionPane.showMessageDialog(this, "游戏结束", "提示", JOptionPane.PLAIN_MESSAGE);
        System.exit(0);
    }

    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();

        // 根据按键设置蛇的移动方向，但不允许直接掉头
        if (key == KeyEvent.VK_LEFT && direction != KeyEvent.VK_RIGHT) {
            direction = KeyEvent.VK_LEFT;
        } else if (key == KeyEvent.VK_RIGHT && direction != KeyEvent.VK_LEFT) {
            direction = KeyEvent.VK_RIGHT;
        } else if (key == KeyEvent.VK_UP && direction != KeyEvent.VK_DOWN) {
            direction = KeyEvent.VK_UP;
        } else if (key == KeyEvent.VK_DOWN && direction != KeyEvent.VK_UP) {
            direction = KeyEvent.VK_DOWN;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(SnakeGame::new);
    }
}

class Snake {
    private int x;
    private int y;

    public Snake(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }
}

